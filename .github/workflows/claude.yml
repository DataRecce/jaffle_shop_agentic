name: Claude Code + Recce MCP

on:
  issue_comment:
    types: [created]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # For PR events, checkout PR head; for issue_comment, will be updated in Get PR information step
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Checkout Recce Repository
        uses: actions/checkout@v4
        with:
          repository: 'DataRecce/recce'
          path: 'recce-repo'
          # Currently using feature branch for MCP implementation
          ref: 'main'
          # Shallow clone to minimize download time and storage
          fetch-depth: 1
          # Disable sparse-checkout for now to ensure all necessary files for pip install are available
          # sparse-checkout and sparse-checkout-cone-mode can be enabled if we identify specific paths needed

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          # Python 3.10 is used for compatibility with Recce and dbt-core
          # Recce requires Python 3.9+ per its setup.py
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python3.10/site-packages
          key: pip-recce-${{ runner.os }}-py3.10-${{ hashFiles('requirements.txt', 'recce-repo/setup.py', 'recce-repo/recce/VERSION') }}
          restore-keys: |
            pip-recce-${{ runner.os }}-py3.10-${{ hashFiles('requirements.txt') }}-
            pip-recce-${{ runner.os }}-py3.10-
            pip-recce-

      - name: Cache dbt packages
        uses: actions/cache@v4
        with:
          path: |
            dbt_packages/
            ~/.dbt/
          key: dbt-packages-${{ hashFiles('packages.yml') }}
          restore-keys: |
            dbt-packages-

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Install dbt packages
        run: |
          dbt deps

      - name: Get PR information for artifacts
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        id: pr-info-artifacts
        run: |
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
          else
            PR_NUMBER="${{ github.event.pull_request.number }}"
          fi
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "::notice::PR Number: $PR_NUMBER"
        env:
          GH_TOKEN: ${{ github.token }}

      # - name: Wait for dbt Build Workflow
      #   if: github.event.pull_request != null || github.event.issue.pull_request != null
      #   uses: lewagon/wait-on-check-action@v1.4.1
      #   with:
      #     ref: ${{ github.event.pull_request.head.sha || github.sha }}
      #     check-name: 'dbt-build'
      #     repo-token: ${{ github.token }}
      #     wait-interval: 10
      #     allowed-conclusions: success,skipped,failure

      - name: Download Current Artifacts
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        id: download-current
        continue-on-error: false
        uses: dawidd6/action-download-artifact@v11
        with:
          name: dbt-artifacts-current-${{ steps.pr-info-artifacts.outputs.pr_number }}
          path: target/
          github_token: ${{ github.token }}
          workflow: dbt-build-artifacts.yml
          pr: ${{ steps.pr-info-artifacts.outputs.pr_number }}
          check_artifacts: true
          search_artifacts: true

      - name: Download Base Artifacts
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        id: download-base
        continue-on-error: false
        uses: dawidd6/action-download-artifact@v11
        with:
          name: dbt-artifacts-base-main
          path: target-base/
          github_token: ${{ github.token }}
          workflow: dbt-build-base.yml
          branch: main
          check_artifacts: true
          search_artifacts: true

      - name: Install Recce from source
        run: |
          # Verify checkout directory exists and contains setup.py
          if [ ! -d "./recce-repo" ]; then
            echo "::error::Recce repository not found at ./recce-repo"
            exit 1
          fi
          
          if [ ! -f "./recce-repo/setup.py" ]; then
            echo "::error::setup.py not found in recce-repo. Checkout may be incomplete."
            exit 1
          fi
          
          # Verify VERSION file exists (required by setup.py)
          if [ ! -f "./recce-repo/recce/VERSION" ]; then
            echo "::error::VERSION file not found. Package data may be incomplete."
            exit 1
          fi
          
          # Upgrade pip, setuptools, and wheel to ensure proper dependency resolution
          echo "Upgrading pip, setuptools, and wheel..."
          pip install --upgrade pip setuptools wheel
          
          # Install packaging first (required by some dependencies)
          echo "Installing base dependencies..."
          pip install packaging
          
          # Install Recce with all dependencies
          # Using -e for editable mode, with explicit dependency installation
          echo "Installing Recce from source with all dependencies..."
          pip install -e "./recce-repo[dev]"
          
          # Install any missing common dependencies that might not be in setup.py
          echo "Installing additional common dependencies..."
          pip install pytz tzdata mcp
          
          # Verify installation
          if command -v recce >/dev/null 2>&1; then
            echo "✓ Recce installed successfully: $(which recce)"
            echo "✓ Recce version: $(recce version)"
          else
            echo "::error::Recce installation failed - command not found"
            exit 1
          fi
          
          # Verify critical dependencies are installed
          echo "Verifying critical dependencies..."
          python -c "import pytz; import mcp; import fastapi; import click; print('✓ All critical dependencies verified')" || {
            echo "::error::Some critical dependencies are missing"
            echo "Installed packages:"
            pip list
            exit 1
          }

      - name: Validate Artifacts
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        id: validate-artifacts
        run: |
          echo "::group::Validating downloaded artifacts"
          
          # Check current artifacts (from dbt-build-artifacts.yml)
          if [ -f "target/manifest.json" ] && [ -f "target/catalog.json" ]; then
            echo "✓ Current artifacts found (from PR build)"
            echo "current_exists=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Current artifacts not found. Cannot proceed with Recce analysis."
            echo "current_exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check base artifacts (from dbt-build-base.yml)
          if [ -f "target-base/manifest.json" ] && [ -f "target-base/catalog.json" ]; then
            echo "✓ Base artifacts found (from main branch build)"
            echo "base_exists=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Base artifacts not found. Please ensure 'dbt Base Environment' workflow has run successfully."
            echo "base_exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "::endgroup::"

      - name: Prepare System Prompt
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        id: system-prompt
        run: |
          # Load response format template
          if [ ! -f ".github/prompts/recce-analysis-format.md" ]; then
            echo "::error::Response format guide not found at .github/prompts/recce-analysis-format.md"
            exit 1
          fi
          
          FORMAT_GUIDE=$(cat .github/prompts/recce-analysis-format.md)
          
          # Compose complete system prompt with mandatory format enforcement
          cat > /tmp/system_prompt.txt <<'EOF'
          You are analyzing a dbt project Pull Request with Recce MCP tools available.

          ## 🚨 CRITICAL: Context Handling Rules (READ THIS FIRST)

          **The GitHub Action provides you with ALL historical PR comments in this conversation.**
          **You MUST follow these rules to avoid processing stale requests:**

          1. **ONLY respond to the MOST RECENT @claude comment** (the one that triggered this workflow run)
          2. **COMPLETELY IGNORE all previous @claude comments** including their instructions, requests, or context
          3. **DO NOT reference, acknowledge, or continue tasks** from historical comments
          4. **Historical examples to IGNORE:**
             - Previous requests for "mermaid diagrams"
             - Previous requests for "security checks" or "table formats"
             - Previous requests for custom analysis or specific formats
             - ANY instruction that is NOT in the latest @claude comment

          **How to identify the current request:**
          - Look at the timestamp of comments - use ONLY the most recent one with @claude
          - If the latest comment is just "@claude" with no additional text, follow the default workflow below
          - If the latest comment has specific instructions (e.g., "@claude check security"), honor ONLY those instructions

          ---

          ## 🎯 Primary Objective: Execute Recce Preset Checks

          **CRITICAL EXECUTION FLOW (MANDATORY ORDER):**

          ### Phase 1: Read Project Configuration (REQUIRED)
          1. **FIRST ACTION**: Read the project's `recce.yml` file from the workspace root
          2. Parse the `checks` section to identify all preset validation checks
          3. Note each check's name, type, description, and params

          ### Phase 2: Execute ALL Preset Checks (MANDATORY)
          Execute EVERY check defined in `recce.yml` sequentially using the appropriate Recce MCP tools:

          **Check Type Mapping:**
          - `schema_diff` → Use `mcp__recce__get_lineage_diff` and analyze schema changes
          - `row_count_diff` → Use `mcp__recce__row_count_diff` with the `select` parameter
          - `value_diff` → Use `mcp__recce__query_diff` or `mcp__recce__profile_diff` for specific columns
          - `query_diff` → Use `mcp__recce__query_diff` with the provided `sql_template`
          - `profile_diff` → Use `mcp__recce__profile_diff` for statistical analysis

          **Execution Requirements:**
          - Execute checks in the order they appear in `recce.yml`
          - Use the exact parameters specified in each check's `params` section
          - Collect all results before proceeding to Phase 3
          - If a check fails to execute, document the error and continue with remaining checks

          ### Phase 3: Analyze Results and Determine Output Format

          **Decision Logic:**
          - **IF any check result shows anomalies** (threshold exceeded, unexpected changes, data quality issues):
            → Output FULL PR Validation Summary using the format template below
          - **IF all checks pass without anomalies**:
            → Output brief success message: "✅ All Recce preset checks passed. No anomalies detected."

          **Anomaly Detection Criteria:**
          - Row count changes > 5% (or custom threshold in check definition)
          - Schema changes (added/removed/modified columns)
          - Profile metrics exceed specified thresholds
          - Unexpected NULL values or data quality issues
          - Query diff results show significant variance

          ### Phase 4: Handle User's Additional Request (OPTIONAL)

          **Processing the LATEST @claude comment:**
          1. **COMPLETE Phases 1-3 FIRST** before addressing any user-specific requests
          2. Check if the latest @claude comment contains additional instructions beyond just "@claude"
          3. If yes, add a new section at the end: "## 📎 Additional Analysis (Per User Request)"
          4. Address the specific request AFTER completing preset checks
          5. If the user's request conflicts with preset checks or format requirements:
             - Prioritize preset checks and format rules
             - Explain the constraint politely in the response

          **Important Notes:**
          - You may use Mermaid diagrams to visualize lineage if YOU determine it's helpful OR if the latest comment requests it
          - Do NOT create Mermaid diagrams just because a historical comment requested it
          - Focus on what the CURRENT comment asks for, not historical requests
          
          ---
          
          ## Response Format Requirements
          
          **ONLY use this detailed format when anomalies are detected in Phase 3.**
          
          CRITICAL RULES (NON-NEGOTIABLE):
          1. Use "# PR Validation Summary" as the main title (H1 heading)
          2. Follow the section order EXACTLY as specified
          3. Use the EXACT section titles with emoji indicators
          4. Separate major sections with "---" horizontal rules
          5. Include ALL [REQUIRED] sections even if content is brief
          6. You may omit [OPTIONAL] sections if not applicable, but maintain section order
          7. For Profile Diff and Row Count data, PREFER markdown tables; use lists ONLY if table data is incomplete
          8. Use concrete values from Recce tool results, NEVER use placeholders like "X" or "value"
          
          EOF
          
          # Append the complete format template
          echo "" >> /tmp/system_prompt.txt
          echo "$FORMAT_GUIDE" >> /tmp/system_prompt.txt
          
          # Add execution notes
          cat >> /tmp/system_prompt.txt <<'EOF'
          
          ---
          
          ## ⚙️ Execution Checklist

          Before responding, verify you have:

          - [ ] 🚨 **CRITICAL**: Identified the MOST RECENT @claude comment by timestamp (ignored ALL historical @claude comments)
          - [ ] 🚨 **CRITICAL**: Confirmed you are NOT responding to any historical requests (mermaid diagrams, security checks, etc. from old comments)
          - [ ] ✅ Phase 1: Read and parsed `recce.yml` from workspace root
          - [ ] ✅ Phase 2: Executed ALL preset checks defined in `recce.yml` using appropriate MCP tools
          - [ ] ✅ Phase 3: Analyzed results and determined if anomalies exist
          - [ ] ✅ Phase 3: Chose correct output format (brief success OR full validation summary)
          - [ ] ✅ Phase 4: Checked if latest @claude comment has additional instructions beyond "@claude"
          - [ ] ✅ Phase 4: If yes, addressed user's additional request AFTER preset checks in separate section
          - [ ] ✅ Validation: All concrete values from actual Recce MCP results (no placeholders)
          - [ ] ✅ Validation: If using full format, verified against Output Validation Checklist

          ## 🚫 Common Mistakes to Avoid

          1. **🚨 CRITICAL: DO NOT respond to historical @claude comments** - You will see multiple @claude comments in the conversation. ONLY the latest one matters!
          2. **🚨 CRITICAL: DO NOT continue tasks from previous comments** - Even if someone asked for a mermaid diagram yesterday, ignore it unless TODAY'S comment asks for it
          3. **DO NOT skip reading `recce.yml`** - this is the first mandatory step
          4. **DO NOT execute generic checks** - only execute checks defined in `recce.yml`
          5. **DO NOT output full report if all checks pass** - use brief success message instead
          6. **DO NOT let user requests override preset checks** - always complete preset checks first
          7. **DO NOT use placeholder values** - all data must come from actual MCP tool results
          
          ## Example Execution Flow

          **Scenario A: All Checks Pass (Simple "@claude" comment)**
          ```
          0. 🚨 Context Check: See 5 historical @claude comments, latest is just "@claude" from Oct 30, 15:18
          1. ✅ Ignore all historical requests (mermaid diagrams, security checks from Oct 28-29)
          2. Read recce.yml → Found 4 preset checks
          3. Execute schema_diff for customers, orders, modified nodes → No schema changes
          4. Execute row_count_diff for customers, orders → Counts stable
          5. Execute value_diff for customers.customer_lifetime_value → 100% match
          6. Execute query_diff for avg lifetime value → No variance
          7. Result: All checks passed
          8. Output: "✅ All Recce preset checks passed. No anomalies detected."
          9. Check latest comment for additional requests → Just "@claude", no additional requests
          10. Done (NO mermaid diagram even though historical comment asked for it)
          ```

          **Scenario B: Anomaly Detected + User Request in Latest Comment**
          ```
          0. 🚨 Context Check: Latest @claude comment says "@claude also check SQL performance"
          1. ✅ Ignore historical comments (focus only on "check SQL performance" from current comment)
          2. Read recce.yml → Found 4 preset checks
          3. Execute schema_diff → No changes
          4. Execute row_count_diff → customers: -15% (ANOMALY)
          5. Execute value_diff → 95% match (ANOMALY: 5% mismatch)
          6. Execute query_diff → avg variance -32.1% (ANOMALY)
          7. Result: Multiple anomalies detected
          8. Output: Full PR Validation Summary with detailed findings
          9. Latest comment has additional request "check SQL performance"
          10. Add "## 📎 Additional Analysis (Per User Request)" section with SQL performance check
          11. Done
          ```

          **Scenario C: Historical Mermaid Request (Should be IGNORED)**
          ```
          0. 🚨 Context Check: See comment from Oct 29 asking for mermaid diagram, but latest @claude is from Oct 30 with just "@claude"
          1. ✅ Ignore the mermaid request from Oct 29 - it's historical!
          2. Read recce.yml → Found 4 preset checks
          3. Execute all preset checks...
          4. Output: Based on Phase 3 decision (brief or full report)
          5. Do NOT create mermaid diagram (unless YOU decide it's helpful for explaining anomalies)
          6. Done
          ```

          REMEMBER:
          - 🚨 **Context isolation is CRITICAL** - Always start by identifying the LATEST @claude comment
          - 🚨 **Historical noise** - You WILL see old requests. Ignore them completely!
          - recce.yml defines the checks → Execute them ALL → Analyze results → Choose output format → Handle CURRENT user request
          - Preset checks are mandatory, current user requests are additive
          - Use Mermaid if YOU think it helps OR if CURRENT comment asks for it
          EOF
          
          # Store prompt file path for next step
          echo "prompt_file=/tmp/system_prompt.txt" >> $GITHUB_OUTPUT
          
          # Display prompt for debugging (first 50 lines)
          echo "::group::System Prompt Preview"
          head -50 /tmp/system_prompt.txt
          echo "::endgroup::"

      - name: Validate MCP Configuration
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        run: |
          # Show current working directory and files for debugging
          echo "Current directory: $(pwd)"
          echo "MCP config path: $(pwd)/.github/mcp_config.json"
          ls -la .github/ || echo "No .github directory"
          
          # Validate MCP config file exists and is valid JSON
          if [ -f ".github/mcp_config.json" ]; then
            echo "✓ MCP configuration file found"
            if jq empty .github/mcp_config.json 2>/dev/null; then
              echo "✓ MCP configuration is valid JSON"
              cat .github/mcp_config.json
            else
              echo "::error::MCP configuration is invalid JSON"
              exit 1
            fi
          else
            echo "::error::MCP configuration file not found at .github/mcp_config.json"
            exit 1
          fi
          
          # Check if Recce CLI is installed and has mcp-server command
          if command -v recce >/dev/null 2>&1; then
            echo "✓ Recce CLI is installed: $(which recce)"
            # Test if mcp-server command is available
            if recce mcp-server --help >/dev/null 2>&1; then
              echo "✓ Recce MCP server command is available"
            else
              echo "::error::Recce CLI found but mcp-server command not available"
              echo "This may indicate the feature branch is not installed correctly"
              exit 1
            fi
          else
            echo "::error::Recce CLI not found in PATH"
            exit 1
          fi

      - name: Test Recce MCP Server
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        run: |
          echo "Testing Recce MCP server startup..."

          echo "Testing Recce MCP server with full parameters..."
          CMD="recce mcp-server --project-dir . --profiles-dir . --config recce.yml --target-path target --target-base-path target-base"
          echo "Command: $CMD"

          # 啟動並收集輸出
          LOG_FILE="recce_mcp_startup.log"
          timeout 5s bash -c "$CMD" >"$LOG_FILE" 2>&1 & 
          MCP_PID=$!

          sleep 1

          if ! kill -0 "$MCP_PID" 2>/dev/null; then
            echo "::error::Recce MCP server failed to start"
            cat "$LOG_FILE" || true
            exit 1
          fi

          # 檢查是否有「Too few parameters」錯誤
          if grep -q "Too few parameters" "$LOG_FILE"; then
            echo "::error::Recce MCP server start error detected: Too few parameters"
            cat "$LOG_FILE"
            kill "$MCP_PID" || true
            exit 1
          fi

          echo "✓ Recce MCP server started without parameter errors (PID: $MCP_PID)"
          kill "$MCP_PID"

      - name: Clean working directory before Claude Code Action
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        run: |
          echo "::group::Cleaning working directory for Claude Code Action"
          echo "Current branch: $(git branch --show-current)"
          echo "Git status before cleaning:"
          git status --short

          # Claude Code Action will perform its own checkout internally
          # We need to ensure no untracked files will conflict with that checkout
          # Stash everything including untracked files
          echo "Stashing all changes including untracked files..."
          git add -A
          git stash push -u -m "Temporary stash before Claude Code Action" || echo "Nothing to stash"

          echo "Git status after cleaning:"
          git status --short
          echo "::endgroup::"

      - name: Run Claude Code with Recce MCP
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Configure Recce MCP tools via claude_args
          # Available tools: get_lineage_diff, row_count_diff, query, query_diff, profile_diff
          # Note: Recce tools are only available when running in PR context with artifacts
          claude_args: |
            --mcp-config .github/mcp_config.json
            --max-turns 50
            --system-prompt-file ${{ steps.system-prompt.outputs.prompt_file }}
            --allowedTools "Read(recce.yml),Bash(recce),Bash(recce mcp-server),Bash(ls target/manifest.json),Bash(ls target-base/manifest.json),Bash(gh pr view:*),Bash(jq -r *),mcp__recce__get_lineage_diff,mcp__recce__row_count_diff,mcp__recce__query,mcp__recce__query_diff,mcp__recce__profile_diff"
