name: Claude Code + Recce MCP

on:
  issue_comment:
    types: [created]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # For PR events, checkout PR head; for issue_comment, will be updated in Get PR information step
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          # Python 3.10 is used for compatibility with Recce and dbt-core
          # Recce requires Python 3.9+ per its setup.py
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python3.10/site-packages
          key: pip-recce-nightly-${{ runner.os }}-py3.10-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-recce-nightly-${{ runner.os }}-py3.10-
            pip-recce-nightly-

      - name: Cache dbt packages
        uses: actions/cache@v4
        with:
          path: |
            dbt_packages/
            ~/.dbt/
          key: dbt-packages-${{ hashFiles('packages.yml') }}
          restore-keys: |
            dbt-packages-

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Install dbt packages
        run: |
          dbt deps

      - name: Get PR information for artifacts
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        id: pr-info-artifacts
        run: |
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
          else
            PR_NUMBER="${{ github.event.pull_request.number }}"
          fi
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "::notice::PR Number: $PR_NUMBER"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Download Current Artifacts
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        id: download-current
        continue-on-error: false
        uses: dawidd6/action-download-artifact@v11
        with:
          name: dbt-artifacts-current-${{ steps.pr-info-artifacts.outputs.pr_number }}
          path: target/
          github_token: ${{ github.token }}
          workflow: dbt-build-artifacts.yml
          pr: ${{ steps.pr-info-artifacts.outputs.pr_number }}
          check_artifacts: true
          search_artifacts: true

      - name: Download Base Artifacts
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        id: download-base
        continue-on-error: false
        uses: dawidd6/action-download-artifact@v11
        with:
          name: dbt-artifacts-base-main
          path: target-base/
          github_token: ${{ github.token }}
          workflow: dbt-build-base.yml
          branch: main
          check_artifacts: true
          search_artifacts: true

      - name: Install Recce with MCP support
        run: |
          echo "::group::Installing Recce Nightly with MCP support"

          # Upgrade pip, setuptools, and wheel to ensure proper dependency resolution
          echo "Upgrading pip, setuptools, and wheel..."
          pip install --upgrade pip setuptools wheel

          # Install Recce Nightly with MCP extras
          echo "Installing recce-nightly[mcp]..."
          pip install 'recce-nightly[mcp]'

          # Verify installation
          if command -v recce >/dev/null 2>&1; then
            echo "✓ Recce installed successfully: $(which recce)"
            echo "✓ Recce version: $(recce version)"
          else
            echo "::error::Recce installation failed - command not found"
            exit 1
          fi

          # Verify critical dependencies are installed
          echo "Verifying critical dependencies..."
          python -c "import mcp; import fastapi; import click; print('✓ All critical dependencies verified')" || {
            echo "::error::Some critical dependencies are missing"
            echo "Installed packages:"
            pip list
            exit 1
          }

          echo "::endgroup::"

      - name: Validate Artifacts
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        id: validate-artifacts
        run: |
          echo "::group::Validating downloaded artifacts"
          
          # Check current artifacts (from dbt-build-artifacts.yml)
          if [ -f "target/manifest.json" ] && [ -f "target/catalog.json" ]; then
            echo "✓ Current artifacts found (from PR build)"
            echo "current_exists=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Current artifacts not found. Cannot proceed with Recce analysis."
            echo "current_exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check base artifacts (from dbt-build-base.yml)
          if [ -f "target-base/manifest.json" ] && [ -f "target-base/catalog.json" ]; then
            echo "✓ Base artifacts found (from main branch build)"
            echo "base_exists=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Base artifacts not found. Please ensure 'dbt Base Environment' workflow has run successfully."
            echo "base_exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "::endgroup::"

      - name: Prepare System Prompt
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        id: system-prompt
        run: |
          # Load response format template
          if [ ! -f ".github/prompts/recce-analysis-format.md" ]; then
            echo "::error::Response format guide not found at .github/prompts/recce-analysis-format.md"
            exit 1
          fi
          
          FORMAT_GUIDE=$(cat .github/prompts/recce-analysis-format.md)
          
          # Compose complete system prompt with mandatory format enforcement
          cat > /tmp/system_prompt.txt <<'EOF'
          You are analyzing a dbt project Pull Request with Recce MCP tools available.

          ## 🚨 CRITICAL: Context Handling Rules (READ THIS FIRST)

          **The GitHub Action provides you with ALL historical PR comments in this conversation.**
          **You MUST follow these rules to avoid processing stale requests:**

          1. **ONLY respond to the MOST RECENT @claude comment** (the one that triggered this workflow run)
          2. **COMPLETELY IGNORE all previous @claude comments** including their instructions, requests, or context
          3. **DO NOT reference, acknowledge, or continue tasks** from historical comments
          4. **Historical examples to IGNORE:**
             - Previous requests for "mermaid diagrams"
             - Previous requests for "security checks" or "table formats"
             - Previous requests for custom analysis or specific formats
             - ANY instruction that is NOT in the latest @claude comment

          **How to identify the current request:**
          - Look at the timestamp of comments - use ONLY the most recent one with @claude
          - If the latest comment is just "@claude" with no additional text, follow the default workflow below
          - If the latest comment has specific instructions (e.g., "@claude check security"), honor ONLY those instructions

          ---

          ## 🎯 Primary Objective: Analyze dbt Changes Using Recce Tools

          **CRITICAL EXECUTION FLOW (MANDATORY ORDER):**

          ### Phase 1: Understand Project Configuration (REQUIRED)
          1. **FIRST ACTION**: Read the project's `recce.yml` file from the workspace root
          2. Parse the `checks` section to understand the expected validation scope
          3. Note each check's name, type, description, and params
          4. **IMPORTANT**: `recce.yml` defines preset checks for `recce run` command, NOT for MCP tools

          ### Phase 2: Perform Analysis Using Recce MCP Tools (MANDATORY)
          **Use Recce MCP tools to perform SIMILAR analysis as defined in `recce.yml`**:
          
          ⚠️ **CRITICAL LIMITATIONS:**
          - MCP tools provide LOW-LEVEL analysis capabilities (lineage, row counts, queries, profiles)
          - MCP tools CANNOT directly execute preset checks defined in `recce.yml`
          - Some check types (e.g., `value_diff`) have NO direct MCP equivalent
          - Use MCP tools to perform EQUIVALENT analysis based on recce.yml guidance

          **Check Type to MCP Tool Mapping (Equivalent Analysis):**
          
          1. **`schema_diff` check** → Use `mcp__recce__get_lineage_diff`
             - ⚠️ **Limitation**: MCP only provides lineage diff (added/removed/modified models)
             - Does NOT provide detailed column-level schema changes
             - Params: Can use `select` from recce.yml, but MCP expects different format
             - **Alternative**: Analyze lineage changes and report modified models
          
          2. **`row_count_diff` check** → Use `mcp__recce__row_count_diff` ✅
             - ✅ **Direct mapping available**
             - Params: Use `select` parameter from recce.yml
             - Note: MCP also supports `node_names`, `node_ids`, `exclude`
          
          3. **`value_diff` check** → ⚠️ **NO direct MCP tool available**
             - Must manually construct SQL query using `mcp__recce__query_diff`
             - Build SQL to select specified columns with primary key
             - Example for customers value_diff:
               ```sql
               SELECT customer_id, customer_lifetime_value 
               FROM {{ ref('customers') }}
               ORDER BY customer_id
               ```
             - Use `primary_keys` parameter for row-level comparison
          
          4. **`query_diff` check** → Use `mcp__recce__query_diff` ✅
             - ✅ **Direct mapping available**
             - Params: Use `sql_template` from recce.yml
             - Optional: `base_sql_template`, `primary_keys`
          
          5. **`profile_diff` check** → Use `mcp__recce__profile_diff` ✅
             - ✅ **Direct mapping available**
             - Params: `model` (required), `columns` (optional)

          **Execution Guidelines:**
          - Use recce.yml as a REFERENCE for what to analyze, not as executable config
          - Adapt preset check params to MCP tool params (they may differ)
          - For checks without direct MCP mapping, provide equivalent analysis
          - Document any limitations or differences in analysis approach
          - Collect all results before proceeding to Phase 3

          ### Phase 3: Analyze Results and Determine Output Format

          **Decision Logic:**
          - **IF any check result shows anomalies** (threshold exceeded, unexpected changes, data quality issues):
            → Output FULL PR Validation Summary using the format template below
          - **IF all checks pass without anomalies**:
            → Output brief success message: "✅ All Recce preset checks passed. No anomalies detected."

          **Anomaly Detection Criteria:**
          - Row count changes > 5% (or custom threshold in check definition)
          - Schema changes (added/removed/modified columns)
          - Profile metrics exceed specified thresholds
          - Unexpected NULL values or data quality issues
          - Query diff results show significant variance

          ### Phase 4: Handle User's Additional Request (OPTIONAL)

          **Processing the LATEST @claude comment:**
          1. **COMPLETE Phases 1-3 FIRST** before addressing any user-specific requests
          2. Check if the latest @claude comment contains additional instructions beyond just "@claude"
          3. If yes, add a new section at the end: "## 📎 Additional Analysis (Per User Request)"
          4. Address the specific request AFTER completing preset checks
          5. If the user's request conflicts with preset checks or format requirements:
             - Prioritize preset checks and format rules
             - Explain the constraint politely in the response

          **Important Notes:**
          - You may use Mermaid diagrams to visualize lineage if YOU determine it's helpful OR if the latest comment requests it
          - Do NOT create Mermaid diagrams just because a historical comment requested it
          - Focus on what the CURRENT comment asks for, not historical requests
          
          ---
          
          ## Response Format Requirements
          
          **ONLY use this detailed format when anomalies are detected in Phase 3.**
          
          CRITICAL RULES (NON-NEGOTIABLE):
          1. Use "# PR Validation Summary" as the main title (H1 heading)
          2. Follow the section order EXACTLY as specified
          3. Use the EXACT section titles with emoji indicators
          4. Separate major sections with "---" horizontal rules
          5. Include ALL [REQUIRED] sections even if content is brief
          6. You may omit [OPTIONAL] sections if not applicable, but maintain section order
          7. For Profile Diff and Row Count data, PREFER markdown tables; use lists ONLY if table data is incomplete
          8. Use concrete values from Recce tool results, NEVER use placeholders like "X" or "value"
          
          EOF
          
          # Append the complete format template
          echo "" >> /tmp/system_prompt.txt
          echo "$FORMAT_GUIDE" >> /tmp/system_prompt.txt
          
          # Add execution notes
          cat >> /tmp/system_prompt.txt <<'EOF'
          
          ---
          
          ## ⚙️ Execution Checklist

          Before responding, verify you have:

          - [ ] 🚨 **CRITICAL**: Identified the MOST RECENT @claude comment by timestamp (ignored ALL historical @claude comments)
          - [ ] 🚨 **CRITICAL**: Confirmed you are NOT responding to any historical requests (mermaid diagrams, security checks, etc. from old comments)
          - [ ] 🚨 **CRITICAL**: Understood that MCP tools provide LOW-LEVEL analysis, NOT preset check execution
          - [ ] ✅ Phase 1: Read and parsed `recce.yml` from workspace root to understand validation scope
          - [ ] ✅ Phase 1: Confirmed recce.yml defines preset checks for `recce run` command (NOT for MCP)
          - [ ] ✅ Phase 2: Used appropriate MCP tools to perform EQUIVALENT analysis based on recce.yml guidance
          - [ ] ✅ Phase 2: Adapted preset check parameters to MCP tool parameters (different formats)
          - [ ] ✅ Phase 2: For checks without direct MCP mapping (e.g., value_diff), constructed equivalent analysis
          - [ ] ✅ Phase 3: Analyzed MCP results and determined if anomalies exist
          - [ ] ✅ Phase 3: Chose correct output format (brief success OR full validation summary)
          - [ ] ✅ Phase 4: Checked if latest @claude comment has additional instructions beyond "@claude"
          - [ ] ✅ Phase 4: If yes, addressed user's additional request AFTER analysis in separate section
          - [ ] ✅ Validation: All concrete values from actual Recce MCP results (no placeholders)
          - [ ] ✅ Validation: If using full format, verified against Output Validation Checklist

          ## 🚫 Common Mistakes to Avoid

          1. **🚨 CRITICAL: DO NOT respond to historical @claude comments** - You will see multiple @claude comments in the conversation. ONLY the latest one matters!
          2. **🚨 CRITICAL: DO NOT continue tasks from previous comments** - Even if someone asked for a mermaid diagram yesterday, ignore it unless TODAY'S comment asks for it
          3. **🚨 CRITICAL: DO NOT think MCP can execute preset checks** - MCP tools provide LOW-LEVEL analysis, NOT preset check execution
          4. **DO NOT skip reading `recce.yml`** - this is the first mandatory step to understand validation scope
          5. **DO NOT try to directly execute preset checks with MCP** - use recce.yml as REFERENCE, then use MCP tools for equivalent analysis
          6. **DO NOT expect exact parameter mapping** - MCP tool parameters differ from preset check parameters
          7. **DO NOT output full report if all checks pass** - use brief success message instead
          8. **DO NOT let user requests override analysis workflow** - always complete analysis first
          9. **DO NOT use placeholder values** - all data must come from actual MCP tool results
          
          ## Example Execution Flow

          **Scenario A: All Analysis Pass (Simple "@claude" comment)**
          ```
          0. 🚨 Context Check: See 5 historical @claude comments, latest is just "@claude" from Oct 30, 15:18
          1. ✅ Ignore all historical requests (mermaid diagrams, security checks from Oct 28-29)
          2. Read recce.yml → Found 4 preset checks (schema_diff, row_count_diff, value_diff, query_diff)
          3. ⚠️ Understand: These are preset checks for `recce run`, NOT directly executable by MCP
          4. Use get_lineage_diff → No schema changes detected (equivalent to schema_diff check)
          5. Use row_count_diff with select="customers orders state:modified" → Counts stable (direct mapping)
          6. Construct query_diff SQL for value_diff check → SELECT customer_id, customer_lifetime_value FROM customers → 100% match
          7. Use query_diff with sql_template from recce.yml → No variance (direct mapping)
          8. Result: All equivalent analyses show no anomalies
          9. Output: "✅ All Recce validation analyses passed. No anomalies detected."
          10. Check latest comment for additional requests → Just "@claude", no additional requests
          11. Done (NO mermaid diagram even though historical comment asked for it)
          ```

          **Scenario B: Anomaly Detected + User Request in Latest Comment**
          ```
          0. 🚨 Context Check: Latest @claude comment says "@claude also check SQL performance"
          1. ✅ Ignore historical comments (focus only on "check SQL performance" from current comment)
          2. Read recce.yml → Found 4 preset checks (schema_diff, row_count_diff, value_diff, query_diff)
          3. ⚠️ Understand: Use MCP tools to perform equivalent analysis
          4. Use get_lineage_diff → No lineage changes (schema_diff equivalent)
          5. Use row_count_diff → customers: -15% (ANOMALY detected)
          6. Construct query_diff for value_diff → 95% match (ANOMALY: 5% mismatch)
          7. Use query_diff with sql_template → avg variance -32.1% (ANOMALY)
          8. Result: Multiple anomalies detected in MCP analysis
          9. Output: Full PR Validation Summary with detailed findings
          10. Latest comment has additional request "check SQL performance"
          11. Add "## 📎 Additional Analysis (Per User Request)" section with SQL performance check
          12. Done
          ```

          **Scenario C: Historical Mermaid Request (Should be IGNORED)**
          ```
          0. 🚨 Context Check: See comment from Oct 29 asking for mermaid diagram, but latest @claude is from Oct 30 with just "@claude"
          1. ✅ Ignore the mermaid request from Oct 29 - it's historical!
          2. Read recce.yml → Found 4 preset checks (for `recce run` reference)
          3. ⚠️ Use MCP tools to perform equivalent analysis (NOT direct execution of preset checks)
          4. Use get_lineage_diff, row_count_diff, query_diff MCP tools...
          5. Output: Based on Phase 3 decision (brief or full report)
          6. Do NOT create mermaid diagram (unless YOU decide it's helpful for explaining anomalies)
          7. Done
          ```

          REMEMBER:
          - 🚨 **Context isolation is CRITICAL** - Always start by identifying the LATEST @claude comment
          - 🚨 **Historical noise** - You WILL see old requests. Ignore them completely!
          - 🚨 **MCP Limitation** - MCP tools provide LOW-LEVEL analysis, NOT preset check execution
          - recce.yml defines validation scope → Use MCP tools for equivalent analysis → Analyze results → Choose output format → Handle CURRENT user request
          - Validation analysis is mandatory, current user requests are additive
          - Use Mermaid if YOU think it helps OR if CURRENT comment asks for it
          EOF
          
          # Store prompt file path for next step
          echo "prompt_file=/tmp/system_prompt.txt" >> $GITHUB_OUTPUT
          
          # Display prompt for debugging (first 50 lines)
          echo "::group::System Prompt Preview"
          head -50 /tmp/system_prompt.txt
          echo "::endgroup::"

      - name: Validate MCP Configuration
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        run: |
          # Show current working directory and files for debugging
          echo "Current directory: $(pwd)"
          echo "MCP config path: $(pwd)/.github/mcp_config.json"
          ls -la .github/ || echo "No .github directory"
          
          # Validate MCP config file exists and is valid JSON
          if [ -f ".github/mcp_config.json" ]; then
            echo "✓ MCP configuration file found"
            if jq empty .github/mcp_config.json 2>/dev/null; then
              echo "✓ MCP configuration is valid JSON"
              cat .github/mcp_config.json
            else
              echo "::error::MCP configuration is invalid JSON"
              exit 1
            fi
          else
            echo "::error::MCP configuration file not found at .github/mcp_config.json"
            exit 1
          fi
          
          # Check if Recce CLI is installed and has mcp-server command
          if command -v recce >/dev/null 2>&1; then
            echo "✓ Recce CLI is installed: $(which recce)"
            # Test if mcp-server command is available
            if recce mcp-server --help >/dev/null 2>&1; then
              echo "✓ Recce MCP server command is available"
            else
              echo "::error::Recce CLI found but mcp-server command not available"
              echo "This may indicate the feature branch is not installed correctly"
              exit 1
            fi
          else
            echo "::error::Recce CLI not found in PATH"
            exit 1
          fi

      - name: Test Recce MCP Server
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        run: |
          echo "Testing Recce MCP server startup..."

          echo "Testing Recce MCP server with full parameters..."
          CMD="recce mcp-server --project-dir . --profiles-dir . --config recce.yml --target-path target --target-base-path target-base"
          echo "Command: $CMD"

          # 啟動並收集輸出
          LOG_FILE="recce_mcp_startup.log"
          timeout 5s bash -c "$CMD" >"$LOG_FILE" 2>&1 & 
          MCP_PID=$!

          sleep 1

          if ! kill -0 "$MCP_PID" 2>/dev/null; then
            echo "::error::Recce MCP server failed to start"
            cat "$LOG_FILE" || true
            exit 1
          fi

          # 檢查是否有「Too few parameters」錯誤
          if grep -q "Too few parameters" "$LOG_FILE"; then
            echo "::error::Recce MCP server start error detected: Too few parameters"
            cat "$LOG_FILE"
            kill "$MCP_PID" || true
            exit 1
          fi

          echo "✓ Recce MCP server started without parameter errors (PID: $MCP_PID)"
          kill "$MCP_PID"

      - name: Clean working directory before Claude Code Action
        if: github.event.pull_request != null || github.event.issue.pull_request != null
        run: |
          echo "::group::Cleaning working directory for Claude Code Action"
          echo "Current branch: $(git branch --show-current)"
          echo "Git status before cleaning:"
          git status --short

          # Claude Code Action will perform its own checkout internally
          # We need to ensure no untracked files will conflict with that checkout
          # Stash everything including untracked files
          echo "Stashing all changes including untracked files..."
          git add -A
          git stash push -u -m "Temporary stash before Claude Code Action" || echo "Nothing to stash"

          echo "Git status after cleaning:"
          git status --short
          echo "::endgroup::"

      - name: Run Claude Code with Recce MCP
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Configure Recce MCP tools via claude_args
          # Available MCP tools (5 total):
          # 1. get_lineage_diff: Get lineage diff (added/removed/modified models)
          #    - Params: select, exclude, packages
          # 2. row_count_diff: Compare row counts between base and current
          #    - Params: node_names, node_ids, select, exclude
          # 3. query: Execute SQL query on specified environment (supports Jinja templates)
          #    - Params: sql_template, base (boolean, default: false)
          # 4. query_diff: Compare SQL query results between base and current
          #    - Params: sql_template, base_sql_template, primary_keys
          # 5. profile_diff: Compare statistical profiles (min/max/avg/distinct count)
          #    - Params: model, columns
          # Note: Recce tools are only available when running in PR context with artifacts
          claude_args: |
            --mcp-config .github/mcp_config.json
            --max-turns 50
            --system-prompt-file ${{ steps.system-prompt.outputs.prompt_file }}
            --allowedTools "Read(recce.yml),Bash(recce),Bash(recce mcp-server),Bash(ls target/manifest.json),Bash(ls target-base/manifest.json),Bash(gh pr view:*),Bash(jq -r *),mcp__recce__get_lineage_diff,mcp__recce__row_count_diff,mcp__recce__query,mcp__recce__query_diff,mcp__recce__profile_diff"
